AWSTemplateFormatVersion : 2010-09-09
Description : Networking template in YAML
Parameters:
    ProjectName:
        Type: String
        Description: The name of the project
        Default: ExampleNetworkingTemplate
    Environment:
        Type: String
        Description: The environment which this template has been deployed in
        Default: Example
    VpcCidrBlock:
        Type: String
        Description: CIDR Block for the vpc
        Default: 10.0.0.0/16
    PublicSubnetAZ1CidrBlock:
        Type: String
        Description: CIDR Block for the public subnet in AZ1
        Default: 10.0.0.0/24
    PublicSubnetAZ2CidrBlock:
        Type: String
        Description: CIDR Block for the public subnet in AZ2
        Default: 10.0.1.0/24
    PrivateSubnetAZ1CidrBlock:
        Type: String
        Description: CIDR Block for the private subnet in AZ1
        Default: 10.0.2.0/24
    PrivateSubnetAZ2CidrBlock:
        Type: String
        Description: CIDR Block for the private subnet in AZ2
        Default: 10.0.3.0/24

Resources:
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCidrBlock
            InstanceTenancy: default
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags:
                - Key: Name
                  Value: !Ref ProjectName
                - Key: Environment
                  Value: !Ref Environment
        DependsOn: 
            - InternetGateway
    
    # The InternetGateway is nessesary for access to/from the internet.
    # It behaves like a NAT
    InternetGateway:
        Type: AWS::EC2::InternetGateway
    AttachGateway:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC
            
    DHCPOptions:
        Type: AWS::EC2::DHCPOptions
        Properties:
            DomainName: ap-southeast-2.compute.internal
            DomainNameServers: 
                - AmazonProvidedDNS
    DHCPOptionsVpcAssociation:
        Type: AWS::EC2::VPCDHCPOptionsAssociation
        Properties:
            DhcpOptionsId: !Ref DHCPOptions
            VpcId: !Ref VPC
    
    # Acl's are a stateless form of firewalling.
    # Acl's act like a black list
    AclGroup:
        Type: AWS::EC2::NetworkAcl
        Properties:
            VpcId: !Ref VPC
    AclEntryIngress:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref AclGroup
            RuleNumber: 100
            Protocol: -1
            RuleAction: allow
            Egress: false
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 0
                To: 65535
    AclEntryEgress:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref AclGroup
            RuleNumber: 100
            Protocol: -1
            RuleAction: allow
            Egress: true
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 0
                To: 65535
    
    # For internet access, outbound traffic needs to be directed to the InternetGateway
    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
    InternetEgressRouting:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PublicRouteTable
            GatewayId: !Ref InternetGateway
            DestinationCidrBlock: 0.0.0.0/0
        DependsOn: AttachGateway
            
    PublicSubnetAZ1:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: ap-southeast-2a
            CidrBlock: !Ref PublicSubnetAZ1CidrBlock
            VpcId: !Ref VPC
            Tags:
                - Key: !Sub "kubernetes.io/cluster/${ProjectName}-${Environment}-ekscluster"
                  Value: shared
    PublicSubnetAZ2:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: ap-southeast-2b
            CidrBlock: !Ref PublicSubnetAZ2CidrBlock
            VpcId: !Ref VPC
            Tags:
                - Key: !Sub "kubernetes.io/cluster/${ProjectName}-${Environment}-ekscluster"
                  Value: shared
            
    PublicSubnetAZ1ToPublicRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnetAZ1
    PublicSubnetAZ2ToPublicRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnetAZ2
    
    EIPNATAZ1:
        Type: AWS::EC2::EIP
        Properties:
            Domain: vpc
        DependsOn: AttachGateway
    NATAZ1:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt [EIPNATAZ1, AllocationId]
            SubnetId: !Ref PrivateSubnetAZ1
        DependsOn: AttachGateway
    PrivateSubnetAZ1:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: ap-southeast-2a
            CidrBlock: !Ref PrivateSubnetAZ1CidrBlock
            VpcId: !Ref VPC
    PrivateSubnetAZ1ToPrivateRouteTableAZ1Association:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateSubnetAZ1RouteTable
            SubnetId: !Ref PrivateSubnetAZ1
    PrivateSubnetAZ1RouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
    RouteToInternetFromPrivateSubnetAZ1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateSubnetAZ1RouteTable
            NatGatewayId: !Ref NATAZ1
            DestinationCidrBlock: 0.0.0.0/0
    
    EIPNATAZ2:
        Type: AWS::EC2::EIP
        Properties:
            Domain: vpc
        DependsOn: AttachGateway
    NATAZ2:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt [EIPNATAZ2, AllocationId]
            SubnetId: !Ref PrivateSubnetAZ2
        DependsOn: AttachGateway
    PrivateSubnetAZ2:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: ap-southeast-2b
            CidrBlock: !Ref PrivateSubnetAZ2CidrBlock
            VpcId: !Ref VPC
    PrivateSubnetAZ2ToPrivateRouteTableAZ2Association:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateSubnetAZ2RouteTable
            SubnetId: !Ref PrivateSubnetAZ2
    PrivateSubnetAZ2RouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
    RouteToInternetFromPrivateSubnetAZ2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateSubnetAZ2RouteTable
            NatGatewayId: !Ref NATAZ2
            DestinationCidrBlock: 0.0.0.0/0
    
    SharedSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow all ingress traffic from my designated IP
            VpcId: !Ref VPC
            SecurityGroupEgress:
                - CidrIp: 0.0.0.0/0
                  FromPort: 0
                  IpProtocol: tcp
                  ToPort: 65535
            SecurityGroupIngress:
                - CidrIp: 14.202.251.244/32
                  FromPort: 0
                  IpProtocol: tcp
                  ToPort: 65535
            Tags:
                - Key: Project
                  Value: !Ref ProjectName
                - Key: Environment
                  Value: !Ref Environment
    
Outputs:
    VPC:
        Value: !Ref VPC
        Export:
            Name: !Sub "${ProjectName}-${Environment}-VPC"
    InternetGateway:
        Value: !Ref InternetGateway
        Export: 
            Name: !Sub "${ProjectName}-${Environment}-InternetGateway"
    InternetGatewayAttachment:
        Value: !Ref AttachGateway
        Export:
            Name: !Sub "${ProjectName}-${Environment}-AttachGateway"
    AclGroup:
        Value: !Ref AclGroup
        Export:
            Name: !Sub "${ProjectName}-${Environment}-AclGroup"
    PublicRouteTable:
        Value: !Ref PublicRouteTable
        Export:
            Name: !Sub "${ProjectName}-${Environment}-PublicRouteTable"
    
    EIPNATAZ1:
        Value: !Ref EIPNATAZ1
        Export:
            Name: !Sub "${ProjectName}-${Environment}-EIPNATAZ1"
    EIPNATAZ1CIDR:
        Value: !Sub "${EIPNATAZ1}/32"
        Export:
            Name: !Sub "${ProjectName}-${Environment}-EIPNATAZ1CIDR"
    PublicSubnetAZ1:
        Value: !Ref PublicSubnetAZ1
        Export:
            Name: !Sub "${ProjectName}-${Environment}-PublicSubnetAZ1"
    PrivateSubnetAZ1:
        Value: !Ref PrivateSubnetAZ1
        Export:
            Name: !Sub "${ProjectName}-${Environment}-PrivateSubnetAZ1"
    PrivateSubnetAZ1RouteTable:
        Value: !Ref PrivateSubnetAZ1RouteTable
        Export:
            Name: !Sub "${ProjectName}-${Environment}-PrivateSubnetAZ1RouteTable"

    EIPNATAZ2:
        Value: !Ref EIPNATAZ2
        Export:
            Name: !Sub "${ProjectName}-${Environment}-EIPNATAZ2"
    EIPNATAZ1CIDR:
        Value: !Sub "${EIPNATAZ2}/32"
        Export:
            Name: !Sub "${ProjectName}-${Environment}-EIPNATAZ2CIDR"
    PublicSubnetAZ2:
        Value: !Ref PublicSubnetAZ2
        Export:
            Name: !Sub "${ProjectName}-${Environment}-PublicSubnetAZ2"
    PrivateSubnetAZ2:
        Value: !Ref PrivateSubnetAZ2
        Export:
            Name: !Sub "${ProjectName}-${Environment}-PrivateSubnetAZ2"
    PrivateSubnetAZ2RouteTable:
        Value: !Ref PrivateSubnetAZ2RouteTable
        Export:
            Name: !Sub "${ProjectName}-${Environment}-PrivateSubnetAZ2RouteTable"
    
    SharedSecurityGroup:
        Value: !Ref SharedSecurityGroup
        Export:
            Name: !Sub "${ProjectName}-${Environment}-SharedSecurityGroup"
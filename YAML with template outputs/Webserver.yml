AWSTemplateFormatVersion : 2010-09-09
Description : Webserver template in YAML
Parameters:
    ProjectName:
        Type: String
        Description: The name of the project.
        Default: ExampleWebserverTemplate
    NetworkingProjectName:
        Type: String
        Description: The name of the networking project.
        Default: ExampleNetworkingTemplate
    Environment:
        Type: String
        Description: The environment which this template has been deployed in.
        Default: Example
    ASG-ScalingEventCooldown:
        Type: Number
        Description: The cooldown period is seconds between each autoscaling event.
        Default: 120
    ASG-HealthCheckGracePeriod:
        Type: Number
        Description: The extra time given by the ASG to an EC2 instance to pass its status checks before it gets terminated. Value is in seconds, in multiples of 60.
        Default: 900
    ASG-MinimumPoolSize:
        Type: Number
        Description: Minimum number of machines in the load balanced pool.
        Default: 1
    ASG-MaximumPoolSize:
        Type: Number
        Description: Maximum number of machines allowed in the load balanced pool.
        Default: 4
    ASG-DesiredPoolSize:
        Type: Number
        Description: Desired number of machines in the load balanced pool.
        Default: 2
    Webserver-ImageId:
        Type: String
        Description: AMI which to base the webserver instances on.
        Default: ami-696a520a
    Webserver-InstanceType:
        Type: String
        Description: Machine instance type
        Default: t2.micro
    Webserver-MachineKey:
        Type: String
        Description: Encryption key used to to encrypt an instaces root/admin login password
        Default: TestMachineKey #<----------------------------------------------------------------- TODO: Create this! --------------------------------------------------------<
    Webserver-EnableDetailedMonitoring:
        Type: Boolean
        Description: 
        Default: true

Resources:
    ELBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            GroupDescription : Allow all ingress traffic from any source associated with this security group
            VpcId: !ImportValue 
                        "Fn::Sub": "${NetworkingProjectName}-VPC"
            SecurityGroupIngress: 
                - IpProtocol : tcp
                  FromPort   : 443
                  ToPort     : 443
                  CidrIp     : !ImportValue 
                                    "Fn::Sub": "${NetworkingProjectName}-EIPNATAZ1CIDR"
            SecurityGroupEgress: 
                - IpProtocol : tcp
                  FromPort   : 0
                  ToPort     : 65535
                  CidrIp     : !ImportValue 
                                    "Fn::Sub": "${NetworkingProjectName}-EIPNATAZ1CIDR"
            Tags:
                - Key: Name
                  Value: "Inbound SSL security group"
    BaseWebserverSecurityGroupSelfReference : 
        Type : AWS::EC2::SecurityGroupIngress
        Properties : 
            GroupId : 
                Ref : ELBSecurityGroup
            IpProtocol : tcp
            FromPort   : 0
            ToPort     : 65535
            SourceSecurityGroupId : 
                Ref : ELBSecurityGroup
        DependsOn  : ELBSecurityGroup
                  
    LoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            LoadBalancerAttributes:
                # Closes front end connection after 90 seconds
                - Key: idle_timeout.timeout_seconds
                  Value: 90
            Name: PrivateLB1
            Scheme: internet-facing #[internet-facing,internal] are the valid values here
            SecurityGroups:
                - !Ref ELBSecurityGroup
            Subnets: 
                - !ImportValue
                    "Fn::Sub": "${NetworkingProjectName}-PrivateSubnetAZ1"
                - !ImportValue
                    "Fn::Sub": "${NetworkingProjectName}-PrivateSubnetAZ3"
            Tags:
                - Key: Name
                  Value: "LoadBalancer"
        DependsOn:
                - ELBSecurityGroup
                    
    AutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            Cooldown: !Ref ASG-ScalingEventCooldown
            HealthCheckGracePeriod: !Ref ASG-HealthCheckGracePeriod
            HealthCheckType: !Ref ASG-HealthCheckType # Valid values are [EC2,ELB]
            LaunchConfigurationName: !Ref Ubuntu1604WebServer
            LoadBalancerNames:
                - !Ref LoadBalancer
            MinSize: !Ref ASG-MinimumPoolSize
            MaxSize: !Ref ASG-MaximumPoolSize
            DesiredCapacity: !Ref ASG-DesiredPoolSize
            MetricsCollection:
                Granularity: 1Minute
            #NotificationConfiguration:
            #    TopicARN: !Ref TODO
            #    NotificationTypes:
            #        - autoscaling:
            TerminationPolicies:
                - ClosestToNextInstanceHour
                - NewestInstance
            VPCZoneIdentifier:
                - !ImportValue
                    "Fn::Sub": "${NetworkingProjectName}-PrivateSubnetAZ1"
                - !ImportValue
                    "Fn::Sub": "${NetworkingProjectName}-PrivateSubnetAZ3"
            Tags:
                - Key: Name
                  Value: Ubuntu 16.04 Webserver
                  PropagateAtLaunch: true
                - Key: ProjectName
                  Value: !Ref ProjectName
                  PropagateAtLaunch: true
                - Key: Environment
                  Value: !Ref Environment
                  PropagateAtLaunch: true

    Ubuntu1604WebServer:
        Type: AWS::AutoScaling::LaunchConfiguration
        #Metadata:
        #    AWS::CloudFormation::Init: 
        #        config: 
        #          packages: 
        #            :
        #          groups: 
        #            :
        #          users: 
        #            :
        #          sources: 
        #            :
        #          files: 
        #            :
        #          commands: 
        #            :
        #          services: 
        #            :
        Properties:
            ImageId: !Ref Webserver-ImageId
            InstanceType: !Ref Webserver-InstanceType
            KeyName: !Ref Webserver-MachineKey
            InstanceMonitoring: !Ref Webserver-EnableDetailedMonitoring #
            AssociatePublicIpAddress: false
            IamInstanceProfile: !Ref Webserver-IamInstanceProfile #
            #UserData: !Base64 "command line stuff" #















        